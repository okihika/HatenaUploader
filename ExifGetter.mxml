<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	 applicationComplete="initApp()" 
	 >


	<mx:Script>
		<![CDATA[
		import com.adobe.crypto.WSSEUsernameToken;
		import mx.utils.Base64Encoder;
		
		private var filePath:String;
		private var image:URLLoader = null;

		private function initApp():void{

			
			//Dragのイベント登録
			topPanel.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER,doDragEnter);
			topPanel.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP,doDragDrop);
			
		}

		// 画像用パネル
		private function doDragEnter(event:NativeDragEvent):void{
			trace("doDragEnter");
			if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)){
				NativeDragManager.acceptDragDrop(topPanel);
			}
		}
		
		// 画像用パネル
		private function doDragDrop(event:NativeDragEvent):void{
			trace("doDragDrop");
			var files:Array=event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
			for(var i:int=0; i<files.length; i++){
				trace(files[i].url);
				topImage.load(files[i].url);
				filePath = files[i].url;
				HatenaFotoPost();
			}
		}
		
		private function HatenaFotoPost():void{
			image = new URLLoader();
			////画像の読み込み
			//var urlloader:URLLoader = new URLLoader();
			image.addEventListener(Event.COMPLETE, ImageLoaded);
			image.dataFormat = URLLoaderDataFormat.BINARY;
			image.load(new URLRequest(filePath));
		}

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);

        }

		private function ImageLoaded(e:Event):void {
			trace("ImageLoaded is Called");

			var contents:Array = null;
			var dump:Array = null;
			var ifd:Array = null;
			var data:ByteArray = new ByteArray();
			var exif:uint = 0;
			//gps
			var gps:uint = 0;
			var interop:uint = 0;
			var length:uint = 0;
			var tiff:TIFF = null;
			
			image.data.readBytes( data, 0, 12 );

			
			if( !isJpeg( data ) || !hasExif( data ) ) {
				trace( "Not a JPEG containing EXIF data." );
				return;	
			}
			
			data.position = 4;
			length = data.readUnsignedShort();
			trace( "EXIF header length: " + length + " bytes" );
			
			image.data.readBytes( data, 0, length - 8 );
			
			if( data[0] == 73 ) {
				trace( "Intel format" );	
			} else {
				trace( "Motorola format" );
			}
			
			tiff = new TIFF( data );
			ifd = tiff.list();
			
			for( var i:int = 0; i < ifd.length; i++ ) {
				trace( "IFD " + i );
				
				if( i == 0 ) {
					trace( "Main image" );	
				} else if( i == 1 ) {
					trace( "Thumbnail image" );	
				}
				
				trace( "At offset: " + ifd[i] );
				
				contents = tiff.dump( ifd[i] );
				tiff.print( contents, TIFF.EXIF_TAGS );
				
				exif = 0;
				//gps
				gps = 0;
				for( var t:int = 0; t < contents.length; t++ ) {
					if( contents[t].getTag() == 34665 ) {
						exif = contents[t].getValues()[0];
					}
					//gps
					if( contents[t].getTag() == 34853 ) {
						gps = contents[t].getValues()[0];
					}
				}
				
				if( exif != 0 ) {
					trace( "Exif SubIFD at offset " + exif );	
					contents = tiff.dump( exif );
					tiff.print( contents, TIFF.EXIF_TAGS );
					
					interop = 0;
					
					for( var s:int = 0; s < contents.length; s++ ) {
						if( contents[s].getTag() == 40965 ) {
							interop = contents[s].getValues()[0];
						}	
					}

					if( interop != 0 ) {
						trace( "Exif Interoperability SubSubIFD at offset " + interop );
						contents = tiff.dump( interop );
						tiff.print( contents, TIFF.INTEROP_TAGS );	
					}					
				}

				//gps
				if( gps != 0 ) {
					trace( "Exif GPSInfo at offset " + gps );	
					contents = tiff.dump( gps );
					tiff.print( contents, TIFF.EXIF_TAGS );
					
					interop = 0;
					
					for( var j:int = 0; j < contents.length; j++ ) {
						if( contents[j].getTag() == 40965 ) {
							interop = contents[j].getValues()[0];
						}	
					}

					if( interop != 0 ) {
						trace( "Exif Interoperability SubSubIFD at offset " + interop );
						contents = tiff.dump( interop );
						tiff.print( contents, TIFF.INTEROP_TAGS );	
					}					
				}

			}



		}

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
            header.text = "たぶんUPできたよ。見てはいよ。";//loader.data;
        }
        
		private function windowDrag():void {
			this.stage.nativeWindow.startMove();
		}
		
		private function windowClose():void {
			this.stage.nativeWindow.close();
		}

		
		public function isJpeg( data:ByteArray ):Boolean {
			var jpeg:Boolean = false;
			
			if( data[0] == 255 && data[1] == 216 &&
				data[2] == 255 && data[3] == 225 ) {
				jpeg = true;	
			}
			
			return jpeg;
		}
		
		public function hasExif( data:ByteArray ):Boolean {
			var exif:Boolean = false;

			if( data[6] == 69 && data[7] == 120 &&
				data[8] == 105 && data[9] == 102 ) {
				exif = true;		
			}
			
			return exif;	
		}

		]]>
	</mx:Script>


	<mx:Panel width="330" height="330" layout="absolute" x="1" y="0" id="topPanel" title="HatenaFotolifeUploader"  alpha="1.0">
		<mx:Image x="10" y="10" width="296" height="220" id="topImage" scaleContent="true"/>
		<mx:TextInput x="10" y="238" id="hatenaId" width="136"/>
		<mx:TextInput x="154" y="238" id="hatenaPass" displayAsPassword="true" width="150"/>
		<mx:Text x="10" y="268" width="294" id="header"/>
	</mx:Panel>
	<mx:Label x="1" y="2" id="mv" mouseDown="windowDrag()" width="291"/>
	<mx:Button x="281" y="3" label="×" id="btnCls" click="windowClose()"/>
	
</mx:WindowedApplication>
